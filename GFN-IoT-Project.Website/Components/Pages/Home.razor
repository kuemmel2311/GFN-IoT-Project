@page "/"
<title>Smart Weather Station</title>
@inject ISnackbar Snackbar
@inject Extensions.LiveUpdateService LiveUpdateService
@inject Extensions.Database.DatabaseManager DbManager
@inject Extensions.Database.SqlQueryManager SQL
@inject EmailClient EmailService

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4 d-flex flex-column align-center">
    <!-- Top Row Cards -->
    <MudGrid Justify="Justify.Center" Style="width: 100%;">
        <MudItem xs="12" sm="6" md="2" Style="flex-grow: 1;">
            <MudCard Elevation="3" Class="animatedClass rounded-lg h-100">
                <MudCardContent Class="animatedClass d-flex flex-column justify-center text-wrap text-break">
                    <div class="d-flex align-items-center">
                        <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Thermostat" Color="Color.Primary" />
                        <MudText Typo="Typo.subtitle1" Class="ml-2text-center">Temperatur</MudText>
                    </div>
                    <MudText Typo="Typo.h5" Color="@GetTemperatureColor(currentTemperature)" Class="text-center">@(currentTemperature.ToString("F2"))°C</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <!-- humidity card -->
        <MudItem xs="12" sm="6" md="2" Style="flex-grow: 1;">
            <MudCard Elevation="3" Class="rounded-lg h-100">
                <MudCardContent Class="d-flex flex-column justify-center text-wrap text-break">
                    <div class="d-flex align-items-center">
                        <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.WaterDrop" Color="Color.Primary" />
                        <MudText Typo="Typo.subtitle1" Class="ml-2text-center">Luftfeuchtigkeit</MudText>
                    </div>
                    <MudText Typo="Typo.h5" Color="@GetHumidityColor(currentHumidity)" Class="text-center">@(currentHumidity.ToString("F2"))%</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <!-- Pressure card -->
        <MudItem xs="12" sm="6" md="2" Style="flex-grow: 1;">
            <MudCard Elevation="3" Class="rounded-lg h-100">
                <MudCardContent Class="d-flex flex-column justify-center text-wrap text-break">
                    <div class="d-flex align-items-center">
                        <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Speed" Color="Color.Primary" />
                        <MudText Typo="Typo.subtitle1" Class="ml-2 text-center">Luftdruck</MudText>
                    </div>
                    <MudText Typo="Typo.h5" Color="@GetPressureColor(currentPressure)" Class="text-center">@(currentPressure) hPa</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <!-- air quality card -->
        <MudItem xs="12" sm="6" md="2" Style="flex-grow: 1;">
            <MudCard Elevation="3" Class="rounded-lg h-100">
                <MudCardContent Class="d-flex flex-column justify-center text-wrap text-break">
                    <div class="d-flex align-items-center">
                        <MudIcon Size="Size.Medium" Icon="@Icons.Material.Filled.Masks" Color="Color.Primary" />
                        <MudText Typo="Typo.subtitle1" Class="ml-2 text-center">Luftqualität</MudText>
                    </div>
                    <MudText Typo="Typo.h5" Color="@GetAirQualityColor(currentAirQuality)" Class="text-center">@(currentAirQuality.ToString("F4")) PPM</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <!-- day/night  card -->
        <MudItem xs="12" sm="6" md="2" Style="flex-grow: 1;">
            <MudCard Elevation="3" Class="rounded-lg h-100">
                <MudCardContent Class="d-flex flex-column justify-center text-wrap text-break">
                    <div class="d-flex align-items-center">
                        <MudIcon Size="Size.Medium" Icon="@GetDayNightIcon(dayTimeStatus)" Color="Color.Primary" />
                        <MudText Typo="Typo.subtitle1" Class="ml-2 text-center">Wetterstatus</MudText>
                    </div>
                    <MudText Typo="Typo.h6" Color="Color.Secondary" Class="text-center">@currentDateTime.ToString("HH:mm:ss")</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Charts and Gauges Section -->
    <MudGrid Class="mt-4" Style="width: 100%;" Justify="Justify.Center">
        <!-- Charts -->
        <MudItem xs="12" md="8">
            <MudGrid>
                <MudItem xs="12" md="6">
                    <MudCard Elevation="3" Class="rounded-lg">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6" Class="mx-auto">Temperatur Chart</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (temperatureSeries != null && temperatureSeries.Count > 0 && temperatureAxisLabels?.Length > 0)
                            {
                                <MudChart ChartType="ChartType.Line"
                                ChartSeries="@temperatureSeries"
                                XAxisLabels="@temperatureAxisLabels"
                                ChartOptions="@chartOptions"
                                Width="100%"
                                Height="100%">
                                </MudChart>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Warning">No temperature data available</MudAlert>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCard Elevation="3" Class="rounded-lg">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6" Class="mx-auto">Luftfeuchtigkeit Chart</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (humiditySeries != null && humiditySeries.Count > 0 && humidityAxisLabels?.Length > 0)
                            {
                                <MudChart ChartType="ChartType.Line"
                                ChartSeries="@humiditySeries"
                                XAxisLabels="@humidityAxisLabels"
                                ChartOptions="@chartOptions"
                                Width="100%"
                                Height="100%">
                                </MudChart>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Warning">No temperature data available</MudAlert>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCard Elevation="3" Class="rounded-lg">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6" Class="mx-auto">Luftdruck Chart</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (pressureSeries != null && pressureSeries.Count > 0 && pressureAxisLabels?.Length > 0)
                            {
                                <MudChart ChartType="ChartType.Line"
                                ChartSeries="@pressureSeries"
                                XAxisLabels="@pressureAxisLabels"
                                ChartOptions="@chartOptions"
                                Width="100%"
                                Height="100%">
                                </MudChart>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Warning">No temperature data available</MudAlert>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" md="6">
                    <MudCard Elevation="3" Class="rounded-lg">
                        <MudCardHeader>
                            <MudText Typo="Typo.h6" Class="mx-auto">Luftqualität Chart</MudText>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (airQualitySeries != null && airQualitySeries.Count > 0 && airQualityAxisLabels?.Length > 0)
                            {
                                <MudChart ChartType="ChartType.Line"
                                ChartSeries="@airQualitySeries"
                                XAxisLabels="@airQualityAxisLabels"
                                ChartOptions="@chartOptions"
                                Width="100%"
                                Height="100%">
                                </MudChart>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Warning">No temperature data available</MudAlert>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
</MudContainer>
@code {

    Timer? _timerLive;
    Timer? _TimerCharts;

    private ChartOptions chartOptions = new ChartOptions
    {
            LineStrokeWidth = 5,
            ShowLegend = true,
    };
    private bool TemperatureWarning { get; set; }
    private bool HumidityWaring { get; set; }
    private bool PressureWaring { get; set; }
    private bool AirQualityWaring { get; set; }

    private double currentTemperature => LiveUpdateService.UpdateTemp;
    private double currentHumidity => LiveUpdateService.UpdateHumidity;
    private int currentPressure => LiveUpdateService.UpdatePressure;
    private double currentAirQuality => LiveUpdateService.UpdateAirQuality;
    private int dayTimeStatus => LiveUpdateService.UpdateDayNight;
    private DateTime currentDateTime { get; set; } = DateTime.Now;

    private List<ChartSeries> temperatureSeries = new();
    private string[]? temperatureAxisLabels;
    private List<ChartSeries> humiditySeries = new();
    private string[]? humidityAxisLabels;
    private List<ChartSeries> pressureSeries = new();
    private string[]? pressureAxisLabels;
    private List<ChartSeries> airQualitySeries = new();
    private string[]? airQualityAxisLabels;
    private async void UpdateDateTime(object state)
    {
        currentDateTime = DateTime.Now;
        InvokeAsync(() => StateHasChanged());


    }
    private void UpdateCharts(object state)
    {
        UpdateChartsAsync();
    }
    private async Task LoadAirQualityDataChartAsync(){
        try
        {
            var twentyFourHoursAgo = currentDateTime.AddHours(-24);
            var airQualityData = await DbManager.LoadDataList<GetDataList.AirQualityData, dynamic>(
                SQL.GET_AIR_QUALITY_DATA,
                new
                {
                    NowTime = currentDateTime.ToString("yyyy-MM-dd HH:mm:ss"),
                    StartTime = twentyFourHoursAgo.ToString("yyyy-MM-dd HH:mm:ss"),
                }
            );
            if (airQualityData == null || !airQualityData.Any())
            {
                airQualitySeries = new List<ChartSeries>();
                airQualityAxisLabels = Array.Empty<string>();
                return;
            }
            airQualityAxisLabels = airQualityData
                .Select(t => t.Timestamp?.ToString("HH:mm") ?? "Unknown")
                .ToArray();
            airQualitySeries = new List<ChartSeries>
            {
                new ChartSeries
                {
                    Name = "Air Quality",
                    Data = airQualityData
                        .Select(t => t.AirQuality ?? 0.0)
                        .ToArray(),
                }
            };
        }
        catch (Exception ex)
        {
            GFNLogger.Log($"Error in LoadAirQualityDataAsync: {ex}");
            throw;
        }
    }
    private async Task LoadPressureDataChartAsync()
    {
        try
        {
            var twentyFourHoursAgo = currentDateTime.AddHours(-24);
            var pressureData = await DbManager.LoadDataList<GetDataList.PressureData, dynamic>(
                SQL.GET_PRESSURE_DATA,
                new
                {
                    NowTime = currentDateTime.ToString("yyyy-MM-dd HH:mm:ss"),
                    StartTime = twentyFourHoursAgo.ToString("yyyy-MM-dd HH:mm:ss"),
                }
            );
            if (pressureData == null || !pressureData.Any())
            {
                pressureSeries = new List<ChartSeries>();
                pressureAxisLabels = Array.Empty<string>();
                return;
            }
            pressureAxisLabels = pressureData
                .Select(t => t.Timestamp?.ToString("HH:mm") ?? "Unknown")
                .ToArray();
            pressureSeries = new List<ChartSeries>
                {
                    new ChartSeries
                    {
                        Name = "Pressure",
                        Data = pressureData
                            .Select(t => t.Pressure ?? 0)
                            .ToArray(),
                    }
                };

        }
        catch (Exception ex)
        {
            GFNLogger.Log($"Error in LoadPressureDataAsync: {ex}");
            throw;
        }
    }
    private async Task LoadHumidityDataChartAsync()
    {
        try
        {
            var twentyFourHoursAgo = currentDateTime.AddHours(-24);
            var humidityData = await DbManager.LoadDataList<GetDataList.HumidityData, dynamic>(
                SQL.GET_HUMIDITY_DATA,
                new
                {
                    NowTime = currentDateTime.ToString("yyyy-MM-dd HH:mm:ss"),
                    StartTime = twentyFourHoursAgo.ToString("yyyy-MM-dd HH:mm:ss"),
                }
            );
            if (humidityData == null || !humidityData.Any())
            {
                humiditySeries = new List<ChartSeries>();
                humidityAxisLabels = Array.Empty<string>();
                return;
            }
            humidityAxisLabels = humidityData
                .Select(t => t.Timestamp?.ToString("HH:mm") ?? "Unknown")
                .ToArray();
            humiditySeries = new List<ChartSeries>
            {
                new ChartSeries
                {

                    Name = "Humidity",
                    Data = humidityData
                        .Select(t => t.Humidity ?? 0.0)
                        .ToArray(),
                }
            };
        }
        catch (Exception ex)
        {
            GFNLogger.Log($"Error in LoadHumidityDataAsync: {ex}");
            throw;
        }
    }
    private async Task LoadTemperatureDataChartAsync()
    {
        try
        {
            var twentyFourHoursAgo = currentDateTime.AddHours(-24);

            var temperatureData = await DbManager.LoadDataList<GetDataList.TemperatureData, dynamic>(
                SQL.GET_TEMPERATURE_DATA,
                new
                {
                    NowTime = currentDateTime.ToString("yyyy-MM-dd HH:mm:ss"),
                    StartTime = twentyFourHoursAgo.ToString("yyyy-MM-dd HH:mm:ss"),
                }
            );

            if (temperatureData == null || !temperatureData.Any())
            {
                temperatureSeries = new List<ChartSeries>();
                temperatureAxisLabels = Array.Empty<string>();
                return;
            }
            temperatureAxisLabels = temperatureData
                .Select(t => t.Timestamp?.ToString("HH:mm") ?? "Unknown")
                .ToArray();

            temperatureSeries = new List<ChartSeries>
            {
                new ChartSeries
                {

                    Name = "Temperature",
                    Data = temperatureData
                        .Select(t => t.Temperature ?? 0.0)
                        .ToArray(),
                }
            };
        }
        catch (Exception ex)
        {
            GFNLogger.Log($"Error in LoadTemperatureDataAsync: {ex}");
            throw;
        }
    }
    private async void UpdateChartsAsync()
    {
        await Task.WhenAll(
            LoadTemperatureDataChartAsync(),
            LoadHumidityDataChartAsync(),
            LoadPressureDataChartAsync(),
            LoadAirQualityDataChartAsync()
        );
        UpdateData();
        InvokeAsync(() => StateHasChanged());

    }
    protected override async Task OnInitializedAsync()
    {
        UpdateChartsAsync();
        _TimerCharts = new Timer(UpdateCharts!, null, 0, 3000); // Update every 10 seconds
        _timerLive = new Timer(UpdateDateTime!, null, 0, 1000); // Update every second
    }
    public void Dispose()
    {
        _TimerCharts?.Dispose();
        _timerLive?.Dispose();
    }
    private async void UpdateData()
    {
        // Check if any values are in danger zone and show notification
        if (IsTemperatureDangerous(currentTemperature) && TemperatureWarning == false)
        {
            TemperatureWarning = true;
            await EmailService.SendEmailAsync("Temperature Warning!!", $"Die Temperatur ist {currentTemperature}");
        }
        else if (!IsTemperatureDangerous(currentTemperature) && TemperatureWarning == true)
        {
            TemperatureWarning = false;
        }
        if (IsHumidityDangerous(currentHumidity) && HumidityWaring == false)
        {
            HumidityWaring = true;
            await EmailService.SendEmailAsync("Humidity Warning!!", $"Die Luftfeuchtigkeit ist {currentHumidity}");
        }   
        else if (!IsHumidityDangerous(currentHumidity) && HumidityWaring == true)
        {
            HumidityWaring = false;
        }
        if (IsAirQualityDangerous(currentAirQuality) && AirQualityWaring == false)
        {
            AirQualityWaring = true;
            await EmailService.SendEmailAsync("Air Quality Warning!!", $"Die Luftqualität ist {currentAirQuality}");
        }
        else if (!IsAirQualityDangerous(currentAirQuality) && AirQualityWaring == true)
        {
            AirQualityWaring = false;
        }
    }
    private string GetDayNightIcon(int value)
    {
        //very dark (Night, moonloight)
        if (value > 0 && value < 50)
        {
            return Icons.Material.Filled.NightsStay;
        }
        // Low Light (early morning or cloudy day)
        else if (value > 50 && value < 200)
        {
            return Icons.Material.Filled.Star;
        }
        //Moderate Light ( room lighting, dim cloudy day)
        else if (value > 200 && value < 500)
        {
            return Icons.Material.Filled.Cloud;
        }
        //Bright Light (Sunny day) burn!
        else
        {
            return Icons.Material.Filled.WbSunny;
        }
    }
    // Helper methods for color coding
    private Color GetTemperatureColor(double temp)
    {
        if (temp < 18 || temp > 31) return Color.Error;
        if (temp < 20 || temp > 25) return Color.Warning;
        return Color.Success;
    }
    private Color GetHumidityColor(double humidity)
    {
        if (humidity < 30 || humidity > 70) return Color.Error;
        if (humidity < 40 || humidity > 60) return Color.Warning;
        return Color.Success;
    }
    private Color GetPressureColor(int pressure)
    {
        if (pressure < 1000 || pressure > 1025) return Color.Warning;
        return Color.Default;
    }
    private Color GetAirQualityColor(double aqi)
    {
        if (aqi > 75) return Color.Error;
        if (aqi > 50) return Color.Warning;
        return Color.Success;
    }
    // Danger checks
    private bool IsTemperatureDangerous(double temp)
    {
        return temp < 15 || temp > 35;
    }

    private bool IsHumidityDangerous(double humidity)
    {
        return humidity < 20 || humidity > 80;
    }

    private bool IsAirQualityDangerous(double aqi)
    {
        return aqi > 75;
    }
    private bool IsPressureDangerous(int pressure)
    {
        return pressure < 990 || pressure > 1025;
    }
}